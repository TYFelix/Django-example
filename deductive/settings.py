import os  # isort:skip
gettext = lambda s: s
DATA_DIR = os.path.dirname(os.path.dirname(__file__))
"""
Django settings for Deductive project.

Generated by 'django-admin startproject' using Django 1.11.

For more information on this file, see
https://docs.djangoproject.com/en/1.11/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.11/ref/settings/
"""

import os

IS_LAMBDA = os.getenv('FRAMEWORK', '') == "Zappa"
IS_PRODUCTION = os.getenv('AWS_STAGE', 'PRODUCTION') == "PRODUCTION"
IS_STAGING = os.getenv('AWS_STAGE', 'PRODUCTION') == "STAGING"

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.11/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
if IS_LAMBDA:
    SECRET_KEY = os.environ.get('SECRET_KEY')
    # RECAPTCHA_PUBLIC_KEY = str(os.getenv('RECAPTCHA_SITE_KEY', ''))
    # RECAPTCHA_PRIVATE_KEY = str(os.getenv('RECAPTCHA_SECRET_KEY', ''))
else:
    SECRET_KEY = 'plss9qu#wezcrsfbm!m^o2$)_7_wc689y_8b(u&watl=e_5mt9'

# SECURITY WARNING: don't run with debug turned on in production!
if IS_LAMBDA:
    DEBUG = not IS_PRODUCTION
else:
    DEBUG = True

if IS_LAMBDA:
    ALLOWED_HOSTS = ['localhost', '127.0.0.1',
                     os.environ.get('CUSTOM_DOMAIN')]
    if IS_PRODUCTION:
        ALLOWED_HOSTS.extend(['www.deductive.com', 'deductive.com'])
else:
    ALLOWED_HOSTS = ['localhost', '127.0.0.1']


# Application definition


ROOT_URLCONF = 'deductive.urls'

WSGI_APPLICATION = 'deductive.wsgi.application'

# Internationalization
# https://docs.djangoproject.com/en/1.11/topics/i18n/

LANGUAGE_CODE = 'en'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.11/howto/static-files/

if IS_LAMBDA:
    AWS_STORAGE_BUCKET_NAME = os.environ.get('STATIC_S3_BUCKET')
    AWS_S3_CUSTOM_DOMAIN = os.environ.get('STATIC_CUSTOM_DOMAIN')
    AWS_DEFAULT_ACL = None
    STATICFILES_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'
    DEFAULT_FILE_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'
    STATIC_URL = "https://%s/" % AWS_S3_CUSTOM_DOMAIN
    MEDIA_URL = "https://%s/" % AWS_S3_CUSTOM_DOMAIN
    STATIC_ROOT = os.path.join(DATA_DIR, 'static')
    MEDIA_ROOT = os.path.join(DATA_DIR, 'media')

    STATICFILES_DIRS = (
        os.path.join(BASE_DIR, 'media'),
    )
else:
    STATIC_URL = '/static/'
    MEDIA_URL = '/media/'
    MEDIA_ROOT = os.path.join(DATA_DIR, 'media')
    STATIC_ROOT = os.path.join(DATA_DIR, 'static')

    STATICFILES_DIRS = (
        os.path.join(BASE_DIR, 'deductive', 'static'),
    )
SITE_ID = 1


TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'deductive', 'templates'),],
        'OPTIONS': {
            'context_processors': [
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'django.template.context_processors.i18n',
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.template.context_processors.media',
                'django.template.context_processors.csrf',
                'django.template.context_processors.tz',
                'sekizai.context_processors.sekizai',
                'django.template.context_processors.static',
                'cms.context_processors.cms_settings',
                'deductive.context_processors.extended_page_options'
            ],
            'loaders': [
                'django.template.loaders.filesystem.Loader',
                'django.template.loaders.app_directories.Loader',
                'django.template.loaders.eggs.Loader',
            ],
        },
    },
]


MIDDLEWARE = [
    'djangocms_redirect.middleware.RedirectMiddleware',
    'cms.middleware.utils.ApphookReloadMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.locale.LocaleMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'cms.middleware.user.CurrentUserMiddleware',
    'cms.middleware.page.CurrentPageMiddleware',
    'cms.middleware.toolbar.ToolbarMiddleware',
    'cms.middleware.language.LanguageCookieMiddleware',
]

INSTALLED_APPS = [
    'djangocms_admin_style',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.admin',
    'django.contrib.sites',
    'django.contrib.sitemaps',
    'django.contrib.staticfiles',
    'django.contrib.messages',
    'cms',
    'storages',
    'menus',
    'sekizai',
    'treebeard',
    'djangocms_text_ckeditor',
    'filer',
    'easy_thumbnails',
    'djangocms_icon',
    'djangocms_column',
    'djangocms_file',
    'djangocms_link',
    'djangocms_picture',
    'djangocms_style',
    'djangocms_snippet',
    'djangocms_googlemap',
    'djangocms_video',
    'djangocms_redirect',
    'deductive',
    'aldryn_bootstrap3',
    'aldryn_background_image',
    'aldryn_apphooks_config',
    'aldryn_categories',
    'aldryn_common',
    'aldryn_newsblog',
    'aldryn_people',
    'aldryn_translation_tools',
    'parler',
    'sortedm2m',
    'taggit',
    'page_setting',
    'mailchimp',
    'haystack',
    'aldryn_search',
    'standard_form',
    'spurl',
    'whoosh',
    'news_snippet',
    'coffee_video',
    'video_post',
    'partner_tile',
    'case_studies_tile',
    'captcha',
    'adminsortable',
]

LANGUAGES = (
    ## Customize this
    ('en', gettext('en')),
)

CMS_LANGUAGES = {
    ## Customize this
    1: [
        {
            'code': 'en',
            'name': gettext('en'),
            'redirect_on_fallback': True,
            'public': True,
            'hide_untranslated': False,
        },
    ],
    'default': {
        'redirect_on_fallback': True,
        'public': True,
        'hide_untranslated': False,
    },
}

CMS_TEMPLATES = (
    ## Customize this
    ('homepage.html', 'HomePage'),
    ('fullwidth.html', 'Fullwidth'),
    ('sidebar_left.html', 'Sidebar Left'),
    ('article_page.html', 'Article Template'),
    ('sidebar_right.html', 'Sidebar Right')
)

CMS_PERMISSION = True

CMS_PLACEHOLDER_CONF = {}

if IS_LAMBDA:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.mysql',
            'NAME': os.environ.get('AURORA_DB_NAME'),  # dbname
            'USER': os.environ.get('AURORA_DB_USER'),  # master username
            'PASSWORD': os.environ.get('AURORA_DB_PWORD'),  # master password
            'HOST': os.environ.get('AURORA_DB_HOST'),  # Endpoint
            'PORT': os.environ.get('AURORA_DB_PORT'),
            'OPTIONS': {
                "init_command": "SET foreign_key_checks = 0;",
            },
        }
    }
else:
    DATABASES = {
        'default': {
            'CONN_MAX_AGE': 0,
            'ENGINE': 'django.db.backends.mysql',
            'HOST': 'localhost',
            'NAME': 'deductivewebsite',
            'PASSWORD': '',
            'PORT': '3306',
            'USER': 'root',
            'OPTIONS': {
                'sql_mode': 'traditional',
            }
        }
    }

MIGRATION_MODULES = {

}

THUMBNAIL_PROCESSORS = (
    'easy_thumbnails.processors.colorspace',
    'easy_thumbnails.processors.autocrop',
    'filer.thumbnail_processors.scale_and_crop_with_subject_location',
    'easy_thumbnails.processors.filters'
)

MAILCHIMP_INTEREST = [
                      "Attribution Services",
                      "Data Services",
                      "Professional Services",
                      "Combining Data Sets",
                      "Insourcing Attribution and Analytics",
                      "National Representative Panel",
                      "Data Science",
                      "Data Engineering",
                      "Pipelines, Warehouses and Lakes",
                      "Data Operations",
                      "Data Cleaning",
                      "Matching and Identity Work",
                      "Analytics",
                      "Data Strategy",
                      ]

FREEBIE_CHOICES = [
    "Cap (one size)",
    "T-shirt, S",
    "T-shirt, M",
    "T-shirt, L",
    "T-shirt, XL",
    "T-shirt, 2XL",
    "Hoodie, S",
    "Hoodie, M",
    "Hoodie, L",
    "Hoodie, XL",
    "Hoodie, 2XL",
]

HAYSTACK_CONNECTIONS = {
  'default': {
      'ENGINE': 'haystack.backends.whoosh_backend.WhooshEngine',
      'PATH': os.path.join(BASE_DIR, 'whoosh_index'),
  },
}
HAYSTACK_ROUTERS = ['aldryn_search.router.LanguageRouter', ]
ALDRYN_SEARCH_REGISTER_APPHOOK = True
ALDRYN_PEOPLE_SEARCH = False

DJANGOCMS_REDIRECT_USE_REQUEST=False
DJANGOCMS_REDIRECT_404_ONLY=True
USE_TZ=False

SILENCED_SYSTEM_CHECKS = ['captcha.recaptcha_test_key_error']
RECAPTCHA_SITE_KEY = '6LcaxsYZAAAAAILpLcP52YJlvEFEvfetmszsAjSP'
